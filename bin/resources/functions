# Since all my stuff is public. A little function to read data from a non-shared file.
# Create a file at root ~ called .secret
## Then in that file. create a variable (one per line) test="Hello World!"
## Get the data by calling $(secret test) -returns-> "Hello World!"

secret() {
  # File to read from
  local file=~/.secrets

  # Assign parameter passed
  local argv=$1

  # We can read file based on line number passed.
  # local readFile=$(sed -n $1p $file)

  # Read file based on the line starting with the word passed as a parameter
  local readFile=$(grep ^$argv $file)
  # Perform regex to return only the value of the variable
  ## Example: Given that our file has a variable called email=example@example.com
  ## from a function you could call $(secret email) and it would return example@example.com
  local fileRead=${readFile#*=}

  # Return the data
  echo $fileRead
}

is_git_repo() {
  $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
  $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

get_git_branch() {
  local branch_name
    # Get the short symbolic ref
    branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"
    printf $branch_name
}

find_repo_url() {
  local temp_url
  temp_url=$(git config --get remote.origin.url)
  temp_url="https://github.com/$(echo $temp_url | cut -d':' -f2)"
  printf $temp_url
}

checkUniqueRepoName() {
  # Check first to see if current user already has a repo on Github with the same name as given argv
  local userAndRepoName=$(git config --get user.name)'/'$(echo $@ | sed 's/ /-/g')
  local apiUrlPath="https://api.github.com/repos/$userAndRepoName"
  local repoUrl="https://github.com/$userAndRepoName"
  local statusCode=$(curl -s -o /dev/null --silent --head --write-out '%{http_code}\n' $apiUrlPath?access_token=$(secret githubApiPlainAuthToken))

  case $statusCode in
    "200")
      echo "${RED}ERROR:"
      printf '\t%s\n' "This repo already exist"
      printf '\t%s\n' "${RESET}${BLUE}$repoUrl${RESET}"
      exit 1
      ;;
  esac
}